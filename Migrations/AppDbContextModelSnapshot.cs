// <auto-generated />
using System;
using EcommerceBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EcommerceBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EcommerceBackend.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e8537ac-5a83-4f32-9ba5-248358dae55a"),
                            CreatedAt = new DateTime(2025, 9, 21, 2, 19, 46, 692, DateTimeKind.Utc).AddTicks(4192),
                            ProductId = new Guid("0dd2df11-f26b-4b0a-bd2a-eb9f1c1f94f6"),
                            Quantity = 2,
                            UserId = new Guid("d60ec960-bc53-424a-9128-5275fbd4969f")
                        });
                });

            modelBuilder.Entity("EcommerceBackend.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BillingAddress")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Tax")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d30b0c2c-d81c-4268-b9ff-1fcaebdb4006"),
                            BillingAddress = "Calle Falsa 123",
                            CreatedAt = new DateTime(2025, 9, 21, 2, 19, 46, 692, DateTimeKind.Utc).AddTicks(4258),
                            InvoiceNumber = "INV-001",
                            PaidAt = new DateTime(2025, 9, 21, 2, 19, 46, 692, DateTimeKind.Utc).AddTicks(4267),
                            Status = "Paid",
                            Tax = 0m,
                            Total = 70m,
                            UserId = new Guid("d60ec960-bc53-424a-9128-5275fbd4969f")
                        });
                });

            modelBuilder.Entity("EcommerceBackend.Models.InvoiceItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8633a68-aea5-4904-a9b5-5a15de248cc4"),
                            InvoiceId = new Guid("d30b0c2c-d81c-4268-b9ff-1fcaebdb4006"),
                            LineTotal = 70m,
                            ProductId = new Guid("0dd2df11-f26b-4b0a-bd2a-eb9f1c1f94f6"),
                            Quantity = 2,
                            UnitPrice = 35m
                        });
                });

            modelBuilder.Entity("EcommerceBackend.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Provider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderPaymentId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cb361e92-3347-46f6-8568-8c1671dfbd8d"),
                            Amount = 70m,
                            CreatedAt = new DateTime(2025, 9, 21, 2, 19, 46, 692, DateTimeKind.Utc).AddTicks(4383),
                            InvoiceId = new Guid("d30b0c2c-d81c-4268-b9ff-1fcaebdb4006"),
                            Provider = "Stripe",
                            ProviderPaymentId = "pay_001",
                            Status = "Completed"
                        });
                });

            modelBuilder.Entity("EcommerceBackend.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("488e5e0f-e6eb-44a3-a587-9c3e5f6c5e7b"),
                            Category = "Electrónica",
                            CreatedAt = new DateTime(2025, 9, 21, 2, 19, 46, 692, DateTimeKind.Utc).AddTicks(4094),
                            Description = "Laptop potente para gaming",
                            ImageUrl = "",
                            Name = "Laptop Gamer",
                            Price = 1500m,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("0dd2df11-f26b-4b0a-bd2a-eb9f1c1f94f6"),
                            Category = "Accesorios",
                            CreatedAt = new DateTime(2025, 9, 21, 2, 19, 46, 692, DateTimeKind.Utc).AddTicks(4106),
                            Description = "Mouse Bluetooth ergonómico",
                            ImageUrl = "",
                            Name = "Mouse Inalámbrico",
                            Price = 35m,
                            Stock = 50
                        });
                });

            modelBuilder.Entity("EcommerceBackend.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("89b8105d-38e1-4849-abe3-d7c20b99d8a4"),
                            CreatedAt = new DateTime(2025, 9, 21, 2, 19, 46, 202, DateTimeKind.Utc).AddTicks(1762),
                            Email = "admin@ecommerce.com",
                            NormalizedEmail = "admin@ecommerce.com",
                            FullName = "Admin",
                            PasswordHash = "$2a$12$VCJVrEjQn17n3Vdd4QXdyOjRJr3BZ1M70Y/JlDlh.wur8H.nZwYYO.",
                            Role = "admin"
                        },
                        new
                        {
                            Id = new Guid("d60ec960-bc53-424a-9128-5275fbd4969f"),
                            CreatedAt = new DateTime(2025, 9, 21, 2, 19, 46, 468, DateTimeKind.Utc).AddTicks(7329),
                            Email = "user@ecommerce.com",
                            NormalizedEmail = "user@ecommerce.com",
                            FullName = "Usuario Test",
                            PasswordHash = "$2a$12$MwOFPEsAFNeID.N9x139jObpJuIlrXzIUMY/ASgGrxUDcLh80CT1W",
                            Role = "user"
                        });
                });

            modelBuilder.Entity("EcommerceBackend.Models.InvoiceItem", b =>
                {
                    b.HasOne("EcommerceBackend.Models.Invoice", null)
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcommerceBackend.Models.Invoice", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
